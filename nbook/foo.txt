# overall time metric
notebook_run_time = time.time()
val               = spark.range(1).select(F.date_format(F.current_timestamp(), 'yyyy.MM.dd HH:mm').alias('t')).first()['t']
bprint()
print(f"[time] current time           :  {val}")
bprint()

bprint("DEEBUG LOGICALS")
#FORCE_OVERWRITE = False  # False means that if the file exists then we wont re-write it 
#FORCE_OVERWRITE = True   # True means overwrite all resultant files
FORCE_REBUILD_ENRICHED  = True   #has_parquet(enriched_write_name)
FORCE_REBUILD_STATIONS  = True    #has_parquet(stations_write_name)
FORCE_REBUILD_INVENTORY = True    # has_parquet(inventory_write_name)
FORCE_REBUILD_STATES    = True    #has_parquet(states_write_name)
FORCE_REBUILD_COUNTRIES = True    #has_parquet(countries_write_name)

FORCE_REBUILD_OVERLAP   = True    #has_parquet(overlap_write_name)
FORCE_REBUILD_PRECIP    = True    #has_parquet(precip_write_path)

print(f"[status] FORCE_REBUILD_ENRICHED  :", FORCE_REBUILD_ENRICHED)
print(f"[status] FORCE_REBUILD_STATIONS  :", FORCE_REBUILD_STATIONS)
print(f"[status] FORCE_REBUILD_INVENTORY :", FORCE_REBUILD_INVENTORY)
print(f"[status] FORCE_REBUILD_STATES    :", FORCE_REBUILD_STATES)
print(f"[status] FORCE_REBUILD_COUNTRIES :", FORCE_REBUILD_COUNTRIES)

print(f"[status] FORCE_REBUILD_OVERLAP   :", FORCE_REBUILD_OVERLAP)
print(f"[status] FORCE_REBUILD_PRECIP    :", FORCE_REBUILD_PRECIP)


azure_account_name        = "madsstorage002"
azure_data_container_name = "campus-data"
azure_user_container_name = "campus-user"
previous_year             = 2024  # full hear
most_recent_year          = 2025  # currently building

data_root      = f"wasbs://{azure_data_container_name}@{azure_account_name}.blob.core.windows.net/ghcnd/"
user_root      = f"wasbs://{azure_user_container_name}@{azure_account_name}.blob.core.windows.net/{username}/"
print(data_root)
data_root      = ensure_dir(data_root)
user_root      = ensure_dir(user_root) 


bprint("ENVIRONMENT ROOT")
print()
print("data_root           :", data_root) 
print("user_root           :", user_root)
bprint()

daily_root     = ensure_dir(f"{data_root}daily/")

print("daily_root          :", daily_root)

report_root    = ensure_dir(f"{user_root}reports/")
image_root     = ensure_dir(f"{data_root}images/")
figs_dir       = "figures/"
 
print("report_root         :", report_root)
print("figs_dir (relative) :", figs_dir)
print("image_root          :", image_root)

bprint("SOURCE FILES")
stations_read_name   = f'{data_root}ghcnd-stations.txt'
inventory_read_name  = f'{data_root}ghcnd-inventory.txt'
countries_read_name  = f'{data_root}ghcnd-countries.txt'
states_read_name     = f'{data_root}ghcnd-states.txt'

previous_csvgz_path  = f'{daily_root}2024.csv.gz' 
current_csvgz_path   = f'{daily_root}2025.csv.gz' 


bprint("USER FOLDERS")

overlap_write_pathh  = ensure_dir(f'{user_root}q1b32_overlap_counts.parquet')
precip_write_path    = ensure_dir(f'{user_root}q2a-agg-precipitation.parquet')
 

print()
print("overlap_write_name  :", overlap_write_name)
print("precip_write_name   :", precip_write_name)


#overlap_counts_path  = ensure_dir(f'{user_root}f'q1b32_overlap_counts.parquet'
#precip_write_path    = ensure_dir(f'{user_root}f'q2a-agg-precipitation.parquet' 

#stations_path = f'wasbs://{azure_data_container_name}@{azure_account_name}.blob.core.windows.net/{stations_write_path}'
#common_data_path    = f'wasbs://{azure_data_container_name}@{azure_account_name}.blob.core.windows.net/'
#stations_read_name  =  inventory_read_name = ""
#stations_read_name  =  inventory_read_name = ""

  
#station_date_element_write_name = f"{user_root}q2a_station_date_element.parquet"
#enriched_stations_write_name    = f"{user_root}enriched_stations.parquet" 
  
#------------------ belt-and-braces -------------------

# parquet
  
stations_write_name  =  ensure_dir(f'{user_root}stations.parquet')      #parquest file referenced by folder
inventory_write_name =  ensure_dir(f'{user_root}inventory.parquet')
countries_write_name =  ensure_dir(f'{user_root}countries.parquet')
states_write_name    =  ensure_dir(f'{user_root}states.parquet')

print()
print("stations_write_name :", stations_write_name)
print("inventory_write_name :", inventory_write_name)
print("countries_write_name:", countries_write_name)
print("states_write_name   :", states_write_name)


enriched_write_name  = ensure_dir(f"{user_root}enriched_stations.parquet" )
station_date_element = ensure_dir(f"{user_root}q2a_station_date_element.parquet")
overlap_counts_name  = ensure_dir(f'{user_root}q1b32_overlap_counts.parquet')
overlap_write_name   = ensure_dir(f'{user_root}q1b32_overlap_counts.parquet')
precip_write_name    = ensure_dir(f'{user_root}q2a-agg-precipitation.parquet') 

print()
print("enriched_write_name :", enriched_write_name)
print("stations_write_name :", stations_write_name))
print("overlap_counts_name :", overlap_counts_name)
print("overlap_write_name  :", overlap_write_name))
print("precip_write_name   :", precip_write_name) 



bprint("METRICS") 
print("Spark       :", spark.version)
print("Python tuple:", sys.version_info[:3]) 
print("username    :", username)
print()
  
bprint("PATHS")

print(f"[status] FORCE_REBUILD_ENRICHED  :", FORCE_REBUILD_ENRICHED)
print(f"[status] FORCE_REBUILD_STATIONS  :", FORCE_REBUILD_STATIONS)
print(f"[status] FORCE_REBUILD_INVENTORY :", FORCE_REBUILD_INVENTORY)
print(f"[status] FORCE_REBUILD_STATES    :", FORCE_REBUILD_STATES)
print(f"[status] FORCE_REBUILD_COUNTRIES :", FORCE_REBUILD_COUNTRIES)

print(f"[status] FORCE_REBUILD_OVERLAP   :", FORCE_REBUILD_OVERLAP)
print(f"[status] FORCE_REBUILD_PRECIP    :", FORCE_REBUILD_PRECIP)

print("image_root          :", image_root) 
print("report_root         :", report_root)
print()


 
print()
print("stations_read_name  :", stations_read_name)
print("inventory_read_name :", inventory_read_name)
print("countries_read_name :", countries_read_name)
print("states_read_name    :", states_read_name)
print()
print("previous_csvgz_path  :", previous_csvgz_path)
print("current_csvgz_path   :", current_csvgz_path)

print()
print("station_date_element:", station_date_element) 
print("enriched_write_name :", enriched_write_name)
print("stations_write_name :", stations_write_name)
print("inventory_write_name:", inventory_write_name)
print("countries_write_name:", countries_write_name)
print("states_write_name   :", states_write_name)

# === EX TRA FOLDERS (local + blob) â€” add-on, non-destructive ===================


 

 
# ----- handy local report file paths (optional helpers)
#processing_html_path   = os.path.join(reports_dir, "Processing.html")
#analysis_html_path     = os.path.join(reports_dir, "Analysis.html")
#visualizations_html_path = os.path.join(reports_dir, "Visualizations.html")

# ----- printout (mirrors your style)
bprint("LOCAL FOLDERS")
#print("figs_dir            :", os.path.abspath(figs_dir))
#print("station_plots_dir   :", os.path.abspath(station_plots_dir))
#print("reports_dir         :", os.path.abspath(reports_dir))

 

#print("\n------------ REPORT FILES (local) ------")
#print("processing_html_path    :", processing_html_path)
#print("analysis_html_path      :", analysis_html_path)
#print("visualizations_html_path:", visualizations_html_path)